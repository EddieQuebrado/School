import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class SQLManager {

	public static void main(String[] args) throws ClassNotFoundException, JSchException, SQLException{
		
		String user = "msandbox";
        String password = "adminpass";
        String host = "127.0.0.1";
        int port = 22;

        try {
            JSch jsch = new JSch();
            Session session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            System.out.println("Establishing Connection...");
            session.connect();
            System.out.println("Connection established.");
            System.out.println("Crating SFTP Channel.");
            ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
        } catch (JSchException e) {
                e.printStackTrace();
            }
		try {
			// The newInstance() call is a work around for some broken Java implementations
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			System.out.println();
			System.out.println("JDBC driver loaded");
			System.out.println();

			Connection conn = makeConnection();
			runQuery(conn);

			conn.close();
			System.out.println();
			System.out.println("Database [test db] connection closed");
			System.out.println();
		} catch (Exception e) {
			// handle the error
			System.err.println(e);
		}
	}
	
	public static Connection makeConnection() {
		try {
			Connection conn = null;
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:5902/CS310%20Database", "msandbox",
					"adminpass");
			// Do something with the Connection
			System.out.println("Database [test db] connection succeeded!");
			System.out.println();
			return conn;
		} catch (SQLException ex) {
			// handle any errors
			System.out.println("here");
			System.err.println("SQLException: " + ex.getMessage());
			System.err.println("SQLState: " + ex.getSQLState());
			System.err.println("VendorError: " + ex.getErrorCode());
		}
		return null;
	}
	
	public static void runQuery(Connection conn) {

		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			String query = "SELECT * FROM cs1.Class where FirstName != ?";
			String name = "Data";

			stmt = conn.prepareStatement(query);
			stmt.setString(1, name);
			rs = stmt.executeQuery();

			// Now do something with the ResultSet ....
			boolean rowsLeft = true;
			rs.first();
			while (rowsLeft) {
				System.out.println(rs.getInt(1) + ":" + rs.getString(2));
				rowsLeft = rs.next();
			}
		} catch (SQLException ex) {
			// handle any errors
			System.err.println("SQLException: " + ex.getMessage());
			System.err.println("SQLState: " + ex.getSQLState());
			System.err.println("VendorError: " + ex.getErrorCode());
		} finally {
			// it is a good idea to release resources in a finally{} block
			// in reverse-order of their creation if they are no-longer needed
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException sqlEx) {
				} // ignore
				rs = null;
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException sqlEx) {
				} // ignore
				stmt = null;
			}
		}
	}
}