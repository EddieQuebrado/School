import java.util.LinkedList;

public class Cache<BTreeNode> {

	int capacity;
	LinkedList<BTreeNode> list;
	
	public Cache(int size) { //for a single level cache
		list = new LinkedList<BTreeNode>();
		capacity=size;		
	}
	
	public BTreeNode getObject(BTreeNode bNode) {
		if (list.size()==0) { //checking if the cache is empty
			list.addFirst(bNode);
		}
		//if the cache is not empty
		else { 
			for (int i=0; i<list.size(); i++) { //checking if we have an item that matches in the cache
				BTreeNode currentEntry = (BTreeNode)list.get(i);
				if (bNode.equals(currentEntry)) { //if we have a HIT, remove old entry and add new entry to front
					list.remove(currentEntry);
					list.addFirst(bNode);
					return bNode;
				}
			}
			//If we did not get a hit
			if(list.size()==capacity) { //if the list is at capacity, remove last element
				list.removeLast();
			}
			list.addFirst(bNode); //add word to top of list
		}
		return null;
	}
	
	public BTreeNode readNode(int offset) {
	   	for (BTreeNode n : list) {
	   		if (n.getOffset() == offset) {
    			list.remove(n);
    			list.addFirst(n);
	    		increaseNumHits();
	    		return n;
	   		}
	   	}
	   	increaseNumMisses();
	   	return null;
    }
	
	public void addObject(BTreeNode element) {
		if(list.size()==capacity) {
			list.removeLast();
		}
		list.addFirst(element);
	}
	
	public void moveToFront(BTreeNode element) {
		list.remove(element);
		list.addFirst(element);
	}
	
	public BTreeNode removeObject(BTreeNode element) {
		list.remove(element);
		return element;
	}
	
	public void clearCache() {
		list.clear();
	}
	
	public int getSize() {
		return list.size();
	}
	
	public void increaseNumMisses() {
		
	}
	
	public void increaseNumHits() {
		
	}
}
