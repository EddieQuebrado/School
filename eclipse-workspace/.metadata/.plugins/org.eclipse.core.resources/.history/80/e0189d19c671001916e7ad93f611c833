import java.util.LinkedList;

public class Cache<T> {

	int capacity;
	LinkedList<T> list;
	
	public Cache(int size) { //for a single level cache
		list = new LinkedList<T>();
		capacity=size;		
	}
	
	public T getObject(T bNode) {
		if (list.size()==0) { //checking if the cache is empty
			list.addFirst(bNode);
		}
		//if the cache is not empty
		else { 
			for (int i=0; i<list.size(); i++) { //checking if we have an item that matches in the cache
				T currentEntry = (T)list.get(i);
				if (bNode.equals(currentEntry)) { //if we have a HIT, remove old entry and add new entry to front
					list.remove(currentEntry);
					list.addFirst(bNode);
					return bNode;
				}
			}
			//If we did not get a hit
			if(list.size()==capacity) { //if the list is at capacity, remove last element
				list.removeLast();
			}
			list.addFirst(bNode); //add word to top of list
		}
		return null;
	}
	
	public void addObject(T element) {
		if(list.size()==capacity) {
			list.removeLast();
		}
		list.addFirst(element);
	}
	
	public void moveToFront(T element) {
		list.remove(element);
		list.addFirst(element);
	}
	
	public T removeObject(T element) {
		list.remove(element);
		return element;
	}
	
	public void clearCache() {
		list.clear();
	}
	
	public int getSize() {
		return list.size();
	}
	
	public int isFull() {
		
	}
}
