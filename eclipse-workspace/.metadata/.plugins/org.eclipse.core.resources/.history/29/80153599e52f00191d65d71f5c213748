import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;

public class project {

	public static Connection makeConnection() {
		try {
			Connection conn = null;
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:5902/test?verifyServerCertificate=false&useSSL=true", "msandbox",
					"adminpass");
			// Do something with the Connection
			System.out.println("Database [test db] connection succeeded!");
			System.out.println();
			return conn;
		} catch (SQLException ex) {
			// handle any errors
			System.err.println("SQLException: " + ex.getMessage());
			System.err.println("SQLState: " + ex.getSQLState());
			System.err.println("VendorError: " + ex.getErrorCode());
		}
		return null;
	}

	public static void runQuery(Connection conn) {

		Statement stmt = null;
		ResultSet rs = null;

		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery("SELECT * FROM cs1.Class");

			// Now do something with the ResultSet ....
			boolean rowsLeft = true;
			rs.first();
			System.out.println("Select * FROM Class...");
			while (rowsLeft) {
				System.out.println(rs.getInt(1) + ":" + rs.getString(2) + ":" + rs.getString(3) + ":" + rs.getString(4) + ":" + rs.getString(5));
				rowsLeft = rs.next();
			}
		} catch (SQLException ex) {
			// handle any errors
			System.err.println("SQLException: " + ex.getMessage());
			System.err.println("SQLState: " + ex.getSQLState());
			System.err.println("VendorError: " + ex.getErrorCode());
		} finally {
			// it is a good idea to release resources in a finally{} block
			// in reverse-order of their creation if they are no-longer needed
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException sqlEx) {
				} // ignore
				rs = null;
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException sqlEx) {
				} // ignore
				stmt = null;
			}
		}
	}
	
	public static void CreateItem(int ItemCode, String ItemDescription, double Price, Connection conn) {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			stmt.execute("Call createitem(" + ItemCode + "," + ItemDescription + "," + Price + ")");
			
		} catch (SQLException ex) {
			// handle any errors
			System.err.println("SQLException: " + ex.getMessage());
			System.err.println("SQLState: " + ex.getSQLState());
			System.err.println("VendorError: " + ex.getErrorCode());
		}
	}
	
	public static void CreatePurchase(int itemCode, int purchaseQuantity) {
		
	}
	
	public void CreateShipment(int itemCode, int shipmentQuantity, String shipmentDate) {
		
	}
	
	public ResultSet GetItems(int itemCode) {
		//allow % to be used for getting all shipments
		return null;
	}
	
	public ResultSet GetShipments(int itemCode) {
		//allow % to be used for getting all shipments
		return null;
	}
	
	public ResultSet GetPurchases(int itemCode) {
		//allow % to be used for getting all shipments
		return null;
	}
	
	public ResultSet ItemsAvailable(int itemCode) {
		//allow % to be used for getting all shipments
		return null;
	}
	
	public int UpdateItem(int itemCode, double price) {
		return 0;
	}
	
	public int DeleteItem(int itemCode) {
		return 0;
	}
	
	public int DeleteShipment(int itemCode) {
		return 0;
	}
	
	public int DeletePurchase(int itemCode) {
		return 0;
	}

	public static void main(String[] args) {
		try {
			// The newInstance() call is a work around for some broken Java implementations
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			System.out.println();
			System.out.println("JDBC driver loaded");
			System.out.println();

			Connection conn = makeConnection();
			runQuery(conn);
			System.out.println("Test Query");

			conn.close();
			System.out.println();
			System.out.println("Database [test db] connection closed");
			System.out.println();
		} catch (Exception ex) {
			// handle the error
			System.err.println(ex);
		}
	}
}

		