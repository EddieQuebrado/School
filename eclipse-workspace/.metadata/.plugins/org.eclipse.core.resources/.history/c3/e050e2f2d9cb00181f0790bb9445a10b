import java.util.Arrays;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class IUArrayList<T> implements IndexedUnsortedList<T> {
	private T[] array;
	private int rear;
	private static int DEFAULT_SIZE = 10;
	
	public IUArrayList() {
		this(DEFAULT_SIZE);
	}
	
	@SuppressWarnings("unchecked")
	public IUArrayList(int intialCapacity) {
		array = (T[])(new Object[intialCapacity]);
		rear = 0;
	}
	
	@Override
	public void addToFront(T element) {
		add(0, element);
	}

	@Override
	public void addToRear(T element) {
		expandArrayIfNecessary();
		array[rear] = element;
		rear++;
	}

	@Override
	public void add(T element) {
		addToRear(element);
	}

	@Override
	public void addAfter(T element, T target) {
		int targetElement = indexOf(element);
		if(targetElement < 0) {
			throw new NoSuchElementException();
		}
		add(targetElement+1, element);
	}

	@Override
	public void add(int index, T element) {
		if(index < 0 || index >= rear) {
			throw new IndexOutOfBoundsException();
		}
		expandArrayIfNecessary();
		for(int i = rear; i > index; i--) {
			array[i] = array[i-1];
		}
		array[index] = element;
		rear++;
	}

	@Override
	public T removeFirst() {
		if(isEmpty()) {
			throw new NoSuchElementException();
		}
		T retVal = array[0];
		remove(0);
		return retVal;
	}

	@Override
	public T removeLast() {
		if(isEmpty()) {
			throw new NoSuchElementException();
		}
		return remove(rear-1);
	}

	@Override
	public T remove(T element) {
		if(isEmpty()) {
			throw new NoSuchElementException();
		}
		int targetElement = indexOf(element);
		if(targetElement < 0) {
			throw new NoSuchElementException();
		}
		return remove(targetElement);
	}

	@Override
	public T remove(int index) {
		outOfBoundsCheck(index);
		for(int i = index; i < rear-1; i++) {
			array[i] = array[i+1];
		}
		T retVal = array[index];
		array[rear-1] = null;
		rear--;
		return retVal;
	}

	@Override
	public void set(int index, T element) {
		outOfBoundsCheck(index);
		array[index] = element;
	}

	@Override
	public T get(int index) {
		outOfBoundsCheck(index);
		return array[index];
	}

	@Override
	public int indexOf(T element) {
		for (int i = 0; i < array.length; i++) {
			if (array[i] == element) {
				return i;
			}
		}
		return -1;
	}

	@Override
	public T first() {
		if(isEmpty() == true) {
			throw new NoSuchElementException();
		}
		return array[0];
	}

	@Override
	public T last() {
		if(isEmpty() == true) {
			throw new NoSuchElementException();
		}
		return array[rear-1];
	}

	@Override
	public boolean contains(T target) {
		return false;
	}

	@Override
	public boolean isEmpty() {
		return (rear == 0);
	}

	@Override
	public int size() {
		return rear;
	}

	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ListIterator<T> listIterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ListIterator<T> listIterator(int startingIndex) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private void expandArrayIfNecessary() {
		if(array.length == rear) {
			array = Arrays.copyOf(array, array.length*2);
		}
	}
	
	private void outOfBoundsCheck(int index) {
		if(index < 0 || index >= size()) {
			throw new IndexOutOfBoundsException();
		}
	}

}
